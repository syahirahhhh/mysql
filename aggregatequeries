#Q1. Use an aggregate to count the number of Clients.
-- 500 rows (YES)
SELECT COUNT(*)
FROM client;

#Q2. Use an aggregate to count Client.BirthDate. The number is different than total Clients. Why?
-- 463 rows (YES, since 37 birthdates are null)
# can observe from SELECT * FROM client WHERE birthdate IS NULL;
SELECT COUNT(birthdate)
FROM client;

#Q3. Group Clients by City and count them. Order by the number of Clients desc.
-- 20 rows (YES)
SELECT
	City,
    COUNT(*)
FROM client
GROUP BY city
ORDER BY COUNT(*) DESC;

#Q4. Calculate a total per invoice using only the InvoiceLineItem table. Group by InvoiceId. You'll need an expression for the line item total: Price * Quantity. Aggregate per group using SUM().
-- 1000 rows (YES)
SELECT
	InvoiceId,
    SUM(price * quantity) InvoiceTotal
FROM invoicelineitem
GROUP BY invoiceid;

#Q5. Calculate a total per invoice using only the InvoiceLineItem table. (See above.) Only include totals greater than $500.00. Order from lowest total to highest.
-- 234 rows (YES)
SELECT
	InvoiceId,
    SUM(price * quantity) InvoiceTotal
FROM invoicelineitem
GROUP BY invoiceid
HAVING SUM(price * quantity) > 500.0
ORDER BY SUM(price * quantity);

#Q6. Calculate the average line item total grouped by InvoiceLineItem.Description.
-- 3 rows (YES)
SELECT
	Description,
    AVG(price * quantity) AvgTotal
FROM invoicelineitem
GROUP BY description;

#Q7. Select ClientId, FirstName, and LastName from Client for clients who have *paid* over $1000 total. Paid is Invoice.InvoiceStatus = 2. Order by LastName, then FirstName.
-- 146 rows (YES)
SELECT
	c.ClientId,
    c.FirstName,
    c.LastName,
    SUM(li.Price * li.Quantity) Total
FROM Client c
INNER JOIN Invoice i ON c.ClientId = i.ClientId
INNER JOIN InvoiceLineItem li ON i.InvoiceId = li.InvoiceId
WHERE i.InvoiceStatus = 2
GROUP BY c.ClientId, c.FirstName, c.LastName
HAVING SUM(li.Price * li.Quantity) > 1000.00
ORDER BY c.LastName, c.FirstName;

#Q8. Count exercises by category. Group by ExerciseCategory.Name. Order by exercise count descending.
-- 13 rows (YES)
SELECT
	c.Name CategoryName,
    COUNT(e.ExerciseId) ExerciseCount
FROM ExerciseCategory c
INNER JOIN Exercise e ON c.ExerciseCategoryId = e.ExerciseCategoryId
GROUP BY c.ExerciseCategoryId, c.Name
ORDER BY COUNT(e.ExerciseId) DESC;

#Q9. Select Exercise.Name along with the minimum, maximum, and average ExerciseInstance.Sets. Order by Exercise.Name.
-- 64 rows (YES)
SELECT
	e.Name ExerciseName,
    MIN(i.Sets) MinSets,
    MAX(i.Sets) MaxSets,
    AVG(i.Sets) AvgSets
FROM Exercise e
INNER JOIN ExerciseInstance i ON e.ExerciseId = i.ExerciseId
GROUP BY e.ExerciseId, e.Name
ORDER BY e.Name;

#Q10. Find the minimum and maximum Client.BirthDate per Workout.
-- 26 rows (YES)
-- Sample: 
-- WorkoutName, EarliestBirthDate, LatestBirthDate
-- '3, 2, 1... Yoga!', '1928-04-28', '1993-02-07'
SELECT
	w.Name WorkoutName,
	MIN(c.BirthDate) EarliestBirthDate,
    MAX(c.BirthDate) LatestBirthDate
FROM Workout w
INNER JOIN ClientWorkout cw ON w.WorkoutId = cw.WorkoutId
INNER JOIN Client c ON cw.ClientId = c.ClientId
GROUP BY w.WorkoutId, w.Name
ORDER BY w.Name;

#Q11. Count client goals. Be careful not to exclude rows for clients without goals.
-- 500 rows total (YES)
-- 50 rows with no goals
SELECT
	c.ClientId,
    COUNT(cg.GoalId) GoalCount
FROM Client c
LEFT OUTER JOIN ClientGoal cg ON c.ClientId = cg.ClientId
GROUP BY c.ClientId
ORDER BY COUNT(cg.GoalId) ASC;

#Q12. Select Exercise.Name, Unit.Name, and minimum and maximum ExerciseInstanceUnitValue.Value for all exercises with a configured ExerciseInstanceUnitValue. Order by Exercise.Name, then Unit.Name.
-- 82 rows (YES)
SELECT
	e.Name ExerciseName,
    u.Name UnitName,
    MIN(eiuv.Value) MinValue,
    MAX(eiuv.Value) 'MaxValue'
FROM Exercise e
INNER JOIN ExerciseInstance ei 
	ON e.ExerciseId = ei.ExerciseId
INNER JOIN ExerciseInstanceUnitValue eiuv 
	ON ei.ExerciseInstanceId = eiuv.ExerciseInstanceId
INNER JOIN Unit u ON eiuv.UnitId = u.UnitId
GROUP BY e.ExerciseId, e.Name, u.UnitId, u.Name
ORDER BY e.Name, u.Name;

#Q13. Modify the query above to include ExerciseCategory.Name. Order by ExerciseCategory.Name, then Exercise.Name, then Unit.Name.
-- 82 rows (YES)
SELECT
	ec.Name CategoryName,
	e.Name ExerciseName,
    u.Name UnitName,
    MIN(eiuv.Value) MinValue,
    MAX(eiuv.Value) 'MaxValue'
FROM Exercise e
INNER JOIN ExerciseInstance ei 
	ON e.ExerciseId = ei.ExerciseId
INNER JOIN ExerciseInstanceUnitValue eiuv 
	ON ei.ExerciseInstanceId = eiuv.ExerciseInstanceId
INNER JOIN Unit u 
	ON eiuv.UnitId = u.UnitId
INNER JOIN ExerciseCategory ec 
	ON e.ExerciseCategoryId = ec.ExerciseCategoryId
GROUP BY e.ExerciseId, e.Name, u.UnitId, u.Name, ec.Name
ORDER BY ec.Name, e.Name, u.Name;

#Q14. Select the minimum and maximum age in years for each Level. To calculate age in years, use the MySQL function DATEDIFF.
-- 4 rows (YES)
SELECT
	l.Name LevelName,
	MIN(DATEDIFF(CURDATE(), c.BirthDate) /365) MinAge,
    MAX(DATEDIFF(CURDATE(), c.BirthDate) /365) MaxAge
FROM Level l
INNER JOIN Workout w ON l.LevelId = w.LevelId
INNER JOIN ClientWorkout cw ON w.WorkoutId = cw.WorkoutId
INNER JOIN Client c ON cw.ClientId = c.ClientId
GROUP BY l.LevelId, l.Name;

#Q15. Stretch Goal! Count logins by email extension (.com, .net, .org, etc...). Research SQL functions to isolate a very specific part of a string value.
-- 27 rows (27 unique email extensions) (YES)
SELECT
	SUBSTRING_INDEX(EmailAddress, '.', -1),
    COUNT(EmailAddress)
FROM Login
GROUP BY SUBSTRING_INDEX(EmailAddress, '.', -1)
ORDER BY COUNT(EmailAddress) DESC;

#Q16. Stretch Goal! Match client goals to workout goals. Select Client FirstName and LastName and Workout.Name for all workouts that match at least 2 of a client's goals. Order by the client's last name, then first name.
-- 139 rows (YES)
SELECT
	w.Name WorkoutName,
    CONCAT(c.FirstName, ' ', c.LastName) ClientName,
    COUNT(cg.GoalId)
FROM Client c
INNER JOIN ClientGoal cg ON c.ClientId = cg.ClientId
INNER JOIN WorkoutGoal wg ON cg.GoalId = wg.GoalId
INNER JOIN Workout w ON wg.WorkoutId = w.WorkoutId
GROUP BY w.WorkoutId, w.Name, c.ClientId, c.FirstName, c.LastName
HAVING COUNT(cg.GoalId) > 1
ORDER BY c.LastName, c.FirstName;
