#Q1. Select all columns from ExerciseCategory and Exercise. The tables should be joined on ExerciseCategoryId. This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows (YES)
SELECT *
FROM exercisecategory ec
INNER JOIN exercise e 
	ON ec.exercisecategoryid = e.exercisecategoryid;
    
#Q2. Select ExerciseCategory.Name and Exercise.Name where the ExerciseCategory does not have a ParentCategoryId (it is null). Again, join the tables on their shared key (ExerciseCategoryId).
-- 9 rows (YES)
SELECT 
ec.name,
e.name
FROM exercisecategory ec
INNER JOIN exercise e
	ON ec.exercisecategoryid = e.exercisecategoryid
    WHERE parentcategoryid IS NULL ;

#Q3. The query above is a little confusing. At first glance, it's hard to tell which Name belongs to ExerciseCategory and which belongs to Exercise. Rewrite the query using an aliases. Alias ExerciseCategory.Name as 'CategoryName'. Alias Exercise.Name as 'ExerciseName'.
-- 9 rows (YES)
SELECT 
ec.name CategoryName,
e.name ExerciseName
FROM exercisecategory ec
INNER JOIN exercise e
	ON ec.exercisecategoryid = e.exercisecategoryid
    WHERE parentcategoryid IS NULL ;

#Q4. Select FirstName, LastName, and BirthDate from Client and EmailAddress from Login where Client.BirthDate is in the 1990s. Join the tables by their key relationship. What is the primary-foreign key relationship?
-- 35 rows (YES)
SELECT 
cl.firstname,
cl.lastname,
cl.birthdate,
l.emailaddress
FROM client cl
INNER JOIN login l
	ON cl.clientid = l.clientid
    WHERE cl.birthdate LIKE '199%';

#Q5. Select Workout.Name, Client.FirstName, and Client.LastName for Clients with LastNames starting with 'C'? How are Clients and Workouts related?
-- 25 rows (YES)
SELECT 
w.name WorkoutName,
c.firstname,
c.lastname
FROM client c
INNER JOIN clientworkout cw ON c.clientid = cw.clientid
INNER JOIN workout w ON cw.workoutid = w.workoutid
WHERE c.lastname LIKE 'C%';

#Q6. Select Names from Workouts and their Goals. This is a many-to-many relationship with a bridge table. Use aliases appropriately to avoid ambiguous columns in the result.
SELECT 
w.name WorkoutName,
g.name GoalName
FROM workout w
INNER JOIN workoutgoal wg ON wg.workoutid=w.workoutid
INNER JOIN goal g ON g.goalid=wg.goalid;

#Q7. Select FirstName and LastName from Client. Select ClientId and EmailAddress from Login. Join the tables, but make Login optional.
-- 500 rows (YES)
SELECT
c.firstname,
c.lastname,
l.clientid,
l.emailaddress
FROM client c
LEFT OUTER JOIN login l ON c.clientid=l.clientid;

#Q8. Using the query above as a foundation, select Clients who do _not_ have a Login.
-- 200 rows (YES)
SELECT
c.firstname,
c.lastname,
l.clientid,
l.emailaddress
FROM client c
LEFT OUTER JOIN login l ON c.clientid=l.clientid
WHERE l.clientid IS NULL;

#Q9. Does the Client, Romeo Seaward, have a Login? Decide using a single query.
-- nope :( (returned record shows clientid is null)
SELECT
c.firstname,
c.lastname,
l.clientid,
l.emailaddress
FROM client c
LEFT OUTER JOIN login l ON c.clientid=l.clientid
WHERE c.firstname = 'Romeo' AND c.lastname = 'Seaward';

#Q10. Select ExerciseCategory.Name and its parent ExerciseCategory's Name. This requires a self-join.
-- 12 rows (YES)
SELECT
	ec.name ExerciseCategory,
    p.name ParentCategory
FROM exercisecategory ec
INNER JOIN exercisecategory p ON ec.parentcategoryid = p.exercisecategoryid;

#Q11. Rewrite the query above so that every ExerciseCategory.Name is included, even if it doesn't have a parent.
-- 16 rows (YES)
SELECT
	ec.name ExerciseCategory,
    p.name ParentCategory
FROM exercisecategory ec
LEFT OUTER JOIN exercisecategory p ON ec.parentcategoryid = p.exercisecategoryid;
    
#Q12. Are there Clients who are not signed up for a Workout?
-- 50 rows (YES)
SELECT 
c.firstname,
c.lastname
FROM client c 
LEFT OUTER JOIN clientworkout cw ON c.clientid=cw.clientid
WHERE cw.workoutid IS NULL;

#Q13. Which Beginner-Level Workouts satisfy at least one of Shell Creane's Goals? Goals are associated to Clients through ClientGoal. Goals are associated to Workouts through WorkoutGoal.
-- 6 rows, 4 unique rows (YES)
SELECT 
w.workoutid,
w.name
FROM client c
INNER JOIN clientgoal cg ON c.clientid=cg.clientid
INNER JOIN workoutgoal wg ON cg.goalid=wg.goalid
INNER JOIN workout w ON wg.workoutid=w.workoutid
WHERE w.levelid=1 AND c.firstname = 'Shell' AND c.lastname = 'Creane';

#Q14. Select all Workouts. Join to the Goal, 'Core Strength', but make it optional. You may have to look up the GoalId before writing the main query. If you filter on Goal.Name in a WHERE clause, Workouts will be excluded. Why? (YA WHY?)
-- 26 Workouts, 3 Goals (YES)
SELECT
w.name WorkoutName,
g.name GoalName
FROM workout w
LEFT OUTER JOIN workoutgoal wg ON w.workoutid=wg.workoutid 
	AND wg.goalid=10
LEFT OUTER JOIN goal g ON wg.goalid=g.goalid;

#Q15. The relationship between Workouts and Exercises is... complicated. Workout links to WorkoutDay (one day in a Workout routine) which links to WorkoutDayExerciseInstance (Exercises can be repeated in a day so a bridge table is required) which links to ExerciseInstance (Exercises can be done with different weights, repetions, laps, etc...) which finally links to Exercise. Select Workout.Name and Exercise.Name for related Workouts and Exercises.
#744 rows (YES)
SELECT
w.name WorkoutName,
e.name ExerciseName
FROM workout w
INNER JOIN workoutday wd ON w.workoutid=wd.workoutid
INNER JOIN workoutdayexerciseinstance wdei ON wd.workoutdayid=wdei.workoutdayid
INNER JOIN exerciseinstance ei ON wdei.exerciseinstanceid=ei.exerciseinstanceid
INNER JOIN exercise e ON ei.exerciseid=e.exerciseid;
   
#Q16. An ExerciseInstance is configured with ExerciseInstanceUnitValue. It contains a Value and UnitId that links to Unit. Example Unit/Value combos include 10 laps, 15 minutes, 200 pounds. Select Exercise.Name, ExerciseInstanceUnitValue.Value, and Unit.Name for the 'Plank' exercise. How many Planks are configured, which Units apply, and what are the configured Values? #plank is exerciseid17
-- 4 rows, 1 Unit, and 4 distinct Values (YES)
SELECT
e.name ExerciseName,
eiuv.value,
u.name UnitName
FROM exercise e
INNER JOIN exerciseinstance ei ON e.exerciseid=ei.exerciseid
LEFT OUTER JOIN exerciseinstanceunitvalue eiuv ON ei.exerciseinstanceid = eiuv.exerciseinstanceid
LEFT OUTER JOIN unit u ON eiuv.unitid = u.unitid 
WHERE e.name = 'Plank';
